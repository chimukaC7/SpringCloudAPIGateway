server.port=8082
spring.application.name=api-gateway
eureka.client.service-url.defaultZone=http://localhost:8010/eureka


#But this is not always the case.
#Often we do not want to use the application name in the request url and we need our request url to look slightly different.
#To do that, we can create custom gateway routes manually and we can have more granular control of the request mapping.
# configure a router in spring cloud API Gateway

# by configuring a route we tell Spring cloud API Gateway to route HTTP request that spring cloud API well received
#to a destination micro service that runs behind spring cloud API Gateway.
#we will need to provide an index of a route, for example, zero for the first index.
#It's like an array of route objects.

#unique id for this route
#as a value I will give this a name that will describe the website at some point that I want this request to be routed to.
spring.cloud.gateway.routes[0].id=users-status-check
#here you will need to provide a url to a microservice
#It can be a name under which this microservice is registered with Eureka Discovery Service and
# it can be an IP address or a hostname to a microservice that is running behind the API gateway.
# if we use domain name and port number
# but because our services start up on the random port number, hardcoded port number here is not very reliable.
# I will not provide a complete IP address or hostname and port no here.
# spring.cloud.gateway.routes[0].uri = http://localhost:8081
# instead I will provide a configuration that will make API Gateway fetch these details from Eureka.
# the name of the micro service under which it is registered with Eureka
# lb stands for load balancer
# we will need to use this value here so that our gateway can resolve this name to an exact IP address & the port No.
# under which this microservice is registered with Eureka.
spring.cloud.gateway.routes[0].uri = lb://users-ws
# predicate will be used to match the HTTP request using headers or HTTP method and
#then route the request to a destination url
# So it's like an if statement.
# If condition in this predicate matches, then the request will be routed to a destination url
# will route the request if all the predicates match
spring.cloud.gateway.routes[0].predicates[0]=Path=/users-ws/users/status/check
#spring.cloud.gateway.routes[0].predicates[1]=Method=GET, POST, PUT, DELETE
spring.cloud.gateway.routes[0].predicates[1]=Method=GET
#One of the ways to make sure that HTTP request to a web service endpoint contains authorization JWT token
#is to configure the Gateway route to require authorization header
#This way, if a HTTP request does not contain authorization header
# SpringCloud API gateway, we will not even route this request to a destination microservice.
# And we can achieve this by using header predicate.
# the header predicated accepts two values.
#First value is a name of the header, which is in our case going to be authorization.
#this is because for this route to work, we want this HTTP request to contain the authorization HTTP header.
#the second parameter is header value, which can be provided as a regular expression
#It will not validate the JWT token included.
#It will just make sure that there is some bearer token value
spring.cloud.gateway.routes[0].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[0].filters[0]=RemoveRequestHeader=Cookie

#Sometimes we need to rewrite the incoming url path to a different path under which our microservice is available
#spring.cloud.gateway.routes[0].filters[1]=RewritePath=/users-ws/users/status/check, /users/status/check
spring.cloud.gateway.routes[0].filters[1]=RewritePath=/users-ws/(?<segment>.*), /$\{segment}
#since we have assigned this filter to a particular route, then it will be executed only for the
##gateway route it is assigned to.
#If you have other routes configured in application properties file, then this filter will not be
#executed for those around unless it is explicitly assigned to those routes.
spring.cloud.gateway.routes[0].filters[2]=AuthorizationHeaderFilter

#to create a new user account, the client application will need to send HTTP post request to a
#user's web server endpoint
# because user account is not yet created,there is no way the client application can have a jwt token for this user for this request.
# So this route will not need to check for authorization header and we do not need to assign it the authorization header filter.
spring.cloud.gateway.routes[1].id = users-ws
spring.cloud.gateway.routes[1].uri = lb://users-ws
spring.cloud.gateway.routes[1].predicates[0]=Path=/users-ws/users
spring.cloud.gateway.routes[1].predicates[1]=Method=POST
spring.cloud.gateway.routes[1].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[1].filters[1]=RewritePath=/users-ws/(?<segment>.*), /$\{segment}

#This route will be performed if our Spring Cloud API Gateway receives HTTP post request to perform user login.
# just like with the previous request and this time one user is trying to perform user login,
# the client application does not have JWT token, so it cannot include it in the request.
#So for this route we also do not check for authorization header and this route does not have the authorization header filter set
spring.cloud.gateway.routes[2].id = users-ws-login
spring.cloud.gateway.routes[2].uri = lb://users-ws
spring.cloud.gateway.routes[2].predicates[0]=Path=/users-ws/users/login
spring.cloud.gateway.routes[2].predicates[1]=Method=POST
spring.cloud.gateway.routes[2].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[2].filters[1]=RewritePath=/users-ws/(?<segment>.*), /$\{segment}

#route for getting user details or updating user details or deleting user details.
#This route might need to check for authorization header.
#So before we can allow the client application to invoke the delete or update or even get user details
#website service endpoint, we want to make sure that user is authorized to perform this operation.
#The best way to perform this authorization is, of course, in the microservice itself.
#But if we need to, we can have a simple check on the API Gateway side to validate and to make sure that
#HTTP request to delete or update or get used details does have authorization header provided.
#So we can have a predicate that makes sure that HTTP request does have authorization header with some value
# and by assigning to this route and authorization header filter, our custom filter will validate
#JWT token and we'll make sure that it was signed with the correct token secret.
spring.cloud.gateway.routes[3].id = users-ws-get-update-delete
spring.cloud.gateway.routes[3].uri = lb://users-ws
spring.cloud.gateway.routes[3].predicates[0]=Path=/users-ws/users/**
spring.cloud.gateway.routes[3].predicates[1]=Method=GET,PUT,DELETE
spring.cloud.gateway.routes[3].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[3].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[3].filters[1]=AuthorizationHeaderFilter
spring.cloud.gateway.routes[3].filters[2]=RewritePath=/users-ws/(?<segment>.*), /$\{segment}

# if we have more micro services to start up and register with Eureka, we should be able to send the request to them via by Gateway using
#their service name in the url of HTTP request.

#This will make or Spring Cloud API Gateway and automatically map and routing http requests to a destination
#micro service, provided that the request is sent to a micro service using its application name
#spring.cloud.gateway.discovery.locator.enabled=true
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true

token.secret = hfgry463hf746hf573ydh475fhy5739


